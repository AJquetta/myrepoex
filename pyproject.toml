[project]
name = "owasp-depscan"
version = "5.0.0"
description = "Fully open-source security audit for project dependencies based on known vulnerabilities and advisories."
authors = [
    {name = "Team AppThreat", email = "cloud@appthreat.com"},
]
dependencies = [
    "appthreat-vulnerability-db>=5.5.4",
    "defusedxml",
    "oras",
    "PyYAML",
    "rich",
    "quart",
    "PyGithub",
    "toml",
    "pdfkit",
]

requires-python = ">=3.8"
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Utilities",
]

[project.urls]
Homepage = "https://github.com/owasp-dep-scan/dep-scan"

[project.scripts]
depscan = "depscan.cli:main"
scan = "depscan.cli:main"

[project.optional-dependencies]
dev = ["black",
"flake8",
"pylint",
"pytest",
"pytest-cov",
"httpretty"
]

[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true
packages = ["depscan", "depscan.lib", "vendor"]

[tool.pytest.ini_options]
addopts = "--verbose --cov-append --cov-report term --cov depscan"

[tool.flake8]
ignore = "E203, E266, E501, W503, W605"
max-line-length = 80
max-complexity = 18
select = "B,C,E,F,W,T4,B9"

[tool.pylint.main]
# Files or directories to be skipped. They should be base names, not paths.
ignore = ["vendor", "test"]
#ignore-patterns = ["^\\.#"]
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
#no-docstring-rgx = "^_"
variable-naming-style = "snake_case"

[tool.pylint.classes]
check-protected-access-in-special-methods = true
defining-attr-methods = ["__init__", "__new__", "setUp", "asyncSetUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make", "os._exit"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-returns = 6
max-statements = 50

[tool.pylint.format]
#expected-line-ending-format = "LF"
#ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 80
single-line-class-stmt = true
single-line-if-stmt = true

[tool.pylint.logging]
logging-format-style = "new"
logging-modules = ["logging"]







